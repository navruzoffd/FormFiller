from src.config import TOKEN
from logger import logger
import re
import json
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup, StateFilter
from playwright.async_api import async_playwright
from fake_useragent import UserAgent
from src.yandex import YandexForm
import os

class FormFillingState(StatesGroup):
    waiting_for_question_number = State()
    waiting_for_weights = State()
    waiting_for_repetitions = State()

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    try:
        logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç üëã. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Yandex —Ñ–æ—Ä–º—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")

@dp.message(lambda message: bool(re.search(r'https?://(?:www\.)?forms\.yandex\.[a-z]{2,}', message.text)))
async def handle_yandex_form_link(message: Message) -> None:
    try:
        link = message.text
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {link}")

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Å—ã–ª–∫—É! –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")

        async with async_playwright() as playwright:
            ua = UserAgent(browsers=['edge', 'chrome'], os=["windows", "android", "ios"])
            form = YandexForm(playwright, ua.random)
            await form.start(link)
            await form.get_form_json(f"forms/{user_id}.json")
            await message.answer("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—É—á–µ–Ω—ã:")
            
            parse_json_message = await parse_json(f"forms/{user_id}.json")
            await message.answer(parse_json_message)
            await message.answer("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å–æ–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤- /weight.\n–ó–∞–ø—É—Å—Ç–∏—Ç—å - /run")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ä–º—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã.")

@dp.message(F.text == "/run")
async def run_filling(message: Message, state: FSMContext):
    try:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /run –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É?")
        await state.set_state(FormFillingState.waiting_for_repetitions)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")

@dp.message(StateFilter(FormFillingState.waiting_for_repetitions))
async def process_repetitions(message: Message, state: FSMContext):
    try:
        repetitions = int(message.text)
        user_id = message.from_user.id
        path = f"forms/{user_id}.json"

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª {repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")
        await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...\n–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ñ–æ—Ä–º—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞!")

        with open(path, 'r', encoding='utf-8') as file: 
            form = json.load(file)

        link = form["formLink"]

        async with async_playwright() as playwright:
            for i in range(repetitions):
                ua = UserAgent(browsers=['edge', 'chrome'], os=["windows", "android", "ios"])
                storage = os.getenv("storage.json")
                form_filler = YandexForm(playwright, ua.random, storage)
                await form_filler.start(link)
                await form_filler.fill_form(f"forms/{user_id}.json")
                if (i+1) % 10 == 0:
                    os.remove("storage.json")

        await message.answer(f"–§–æ—Ä–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ {repetitions} —Ä–∞–∑(–∞).")
        logger.info(f"–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ {repetitions} —Ä–∞–∑(–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã.")
    finally:
        await state.clear()

@dp.message(F.text == "/weight")
async def weight_setting(message: Message, state: FSMContext):
    user_id = message.from_user.id
    path = f"forms/{user_id}.json"

    try:
        with open(path, 'r', encoding='utf-8') as file:
            form = json.load(file)
        
        questions = form.get('questions', [])
        
        if not questions:
            await message.answer("–í —ç—Ç–æ–π —Ñ–æ—Ä–º–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return
        
        question_list = "\n".join([f"{i+1}) {q['questionText']}" for i, q in enumerate(questions)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–µ—Å–æ–≤:\n\n{question_list}")
        await state.set_state(FormFillingState.waiting_for_question_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã.")

@dp.message(StateFilter(FormFillingState.waiting_for_question_number))
async def process_question_number(message: Message, state: FSMContext):
    try:
        question_number = int(message.text) - 1
        user_id = message.from_user.id
        path = f"forms/{user_id}.json"

        with open(path, 'r', encoding='utf-8') as file:
            form = json.load(file)

        if question_number < 0 or question_number >= len(form['questions']):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(question_number=question_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9,1,1,1). –í–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 10.")
        await state.set_state(FormFillingState.waiting_for_weights)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞.")

@dp.message(StateFilter(FormFillingState.waiting_for_weights))
async def process_weights(message: Message, state: FSMContext):
    try:
        weights = list(map(int, message.text.split(',')))

        if any(weight < 0 or weight > 10 for weight in weights):
            await message.answer("–í–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        user_data = await state.get_data()
        question_number = user_data.get('question_number')

        user_id = message.from_user.id
        path = f"forms/{user_id}.json"

        with open(path, 'r', encoding='utf-8') as file:
            form = json.load(file)

        options = form['questions'][question_number].get('options', [])
        if len(weights) != len(options):
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Å–æ–≤ ({len(weights)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–≤–µ—Ç–æ–≤ ({len(options)}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        form['questions'][question_number]['selectionWeight'] = {
            str(i + 1): weight for i, weight in enumerate(weights)
        }

        with open(path, 'w', encoding='utf-8') as file:
            json.dump(form, file, ensure_ascii=False, indent=4)

        await message.answer(f"–í–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{question_number + 1}.\n–£–∫–∞–∑–∞—Ç—å –≤–µ—Å–æ–º–æ—Å—Ç—å - /weight.\n–ó–∞–ø—É—Å—Ç–∏—Ç—å - /run")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–µ—Å–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{question_number + 1}: {weights}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–µ—Å–∞ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ—Å–æ–≤.")
    finally:
        await state.clear()

async def parse_json(path: str):
    try:
        with open(path, 'r', encoding='utf-8') as file:
            form = json.load(file)

        message_text = f"{form['formTitle']}\n\n"
        question_num = 1
        for question in form["questions"]:
            message_text += f"{question_num}) {question['questionText']}:\n"
            for option in question["options"]:
                message_text += f"- {option}\n"
            message_text += "\n"
            question_num += 1

        return message_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Ñ–∞–π–ª–∞ {path}: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã."

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
